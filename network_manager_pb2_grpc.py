# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import network_manager_pb2 as network__manager__pb2


class ManagerStub(object):
    """Manager service defintion
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.turn_on_interface = channel.unary_unary(
                '/Manager/turn_on_interface',
                request_serializer=network__manager__pb2.Interface.SerializeToString,
                response_deserializer=network__manager__pb2.InterfaceResponse.FromString,
                )
        self.turn_off_interface = channel.unary_unary(
                '/Manager/turn_off_interface',
                request_serializer=network__manager__pb2.Interface.SerializeToString,
                response_deserializer=network__manager__pb2.InterfaceResponse.FromString,
                )
        self.show_one_interface = channel.unary_unary(
                '/Manager/show_one_interface',
                request_serializer=network__manager__pb2.Interface.SerializeToString,
                response_deserializer=network__manager__pb2.InterfaceResponse.FromString,
                )


class ManagerServicer(object):
    """Manager service defintion
    """

    def turn_on_interface(self, request, context):
        """turn on Interface
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def turn_off_interface(self, request, context):
        """turn off interface
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def show_one_interface(self, request, context):
        """show all interfaces
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'turn_on_interface': grpc.unary_unary_rpc_method_handler(
                    servicer.turn_on_interface,
                    request_deserializer=network__manager__pb2.Interface.FromString,
                    response_serializer=network__manager__pb2.InterfaceResponse.SerializeToString,
            ),
            'turn_off_interface': grpc.unary_unary_rpc_method_handler(
                    servicer.turn_off_interface,
                    request_deserializer=network__manager__pb2.Interface.FromString,
                    response_serializer=network__manager__pb2.InterfaceResponse.SerializeToString,
            ),
            'show_one_interface': grpc.unary_unary_rpc_method_handler(
                    servicer.show_one_interface,
                    request_deserializer=network__manager__pb2.Interface.FromString,
                    response_serializer=network__manager__pb2.InterfaceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Manager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Manager(object):
    """Manager service defintion
    """

    @staticmethod
    def turn_on_interface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager/turn_on_interface',
            network__manager__pb2.Interface.SerializeToString,
            network__manager__pb2.InterfaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def turn_off_interface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager/turn_off_interface',
            network__manager__pb2.Interface.SerializeToString,
            network__manager__pb2.InterfaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def show_one_interface(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Manager/show_one_interface',
            network__manager__pb2.Interface.SerializeToString,
            network__manager__pb2.InterfaceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
